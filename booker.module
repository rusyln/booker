<?php
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\EntityInterface;
use Symfony\Component\Mime\Email;
use Drupal\Core\Mail\MailManagerInterface;
use Drupal\Core\Language\LanguageManagerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
/**
 * Implements hook_form_alter().
 */
/**
 * Implements hook_form_alter().
 */
function booker_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    if ($form_id == 'node_booking_form') {
        // Remove the existing field_rooms entity reference field.
        unset($form['field_rooms']);

        // Add the custom rooms field.
        $form['field_rooms_custom'] = [
            '#type' => 'checkboxes', // Use checkboxes if multiple rooms can be selected.
            '#title' => t('Rooms'),
            '#options' => get_rooms_options(), // Implement a function to get room options.
            '#required' => TRUE, // Adjust as needed.
            '#default_value' => "",
            '#description' => t('Select the rooms for booking.'),
        ];

        // Add the custom validation handler.
        $form['#validate'][] = 'booker_form_validate';
    }
}


/**
 * Implements hook_theme().
 */
function booker_theme($existing, $type, $theme, $path) {
    return [
        'room_card' => [
            'variables' => [
                'room' => NULL, // The room entity.
            ],
            'templates' => 'room-card', // Create a corresponding template file.
        ],
    ];
}


/**
 * Custom function to get room options.
 */

 function get_rooms_options() {
    $options = [];
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('floor_and_rooms');

    if (is_array($terms) || is_object($terms)) {
        foreach ($terms as $term) {
            $options[$term->tid] = $term->name;
        }
    }
    return $options;
}

/**
 * Custom validation handler for the booking form.
 */
function booker_form_validate(&$form, FormStateInterface $form_state) {
  
    // Retrieve the values of the date/time and room fields from the form state.
    $dateTimeValues = $form_state->getValue('field_field_start_datetime');
    $roomValue = $form_state->getValue('field_rooms');

    // Log the values for debugging purposes.
    \Drupal::logger('booker')->debug('Date value: @date', ['@date' => print_r($dateTimeValues, TRUE)]);
    \Drupal::logger('booker')->debug('Room value: @room', ['@room' => print_r($roomValue, TRUE)]);

    // Check if the date/time field is an array and has at least one value.
    if (is_array($dateTimeValues) && !empty($dateTimeValues[0]['value'])) {
        // Extract the date part of the first date/time field value.
        $dateValue = substr($dateTimeValues[0]['value'], 0, 10);

        // Log the extracted date value.
        \Drupal::logger('booker')->debug('Extracted date value: @date', ['@date' => $dateValue]);

        // Build the query to check for existing bookings with the same date and room.
        $query = \Drupal::entityQuery('node')
            ->condition('type', 'booking')
            ->condition('field_field_start_datetime.value', $dateValue . '%', 'LIKE')
            ->condition('field_rooms', $roomValue)
            ->accessCheck(FALSE);

        // Execute the query to get node IDs of matching bookings.
        $nids = $query->execute();

        // Log the result of the query for debugging purposes.
        \Drupal::logger('booker')->debug('Matching booking node IDs: @nids', ['@nids' => print_r($nids, TRUE)]);

        // If any matching booking nodes are found, set an error on the form.
        if (!empty($nids)) {
            $form_state->setErrorByName('field_field_start_datetime', t('This date and room are already booked.'));
        }
    } else {
        // If date/time value is not properly set, set an error on the form.
        $form_state->setErrorByName('field_field_start_datetime', t('Please provide a valid date and time.'));
    }
}



/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function booker_node_presave(EntityInterface $entity) {
    if ($entity->bundle() == 'booking' && $entity->hasField('field_booking_status') && $entity->field_booking_status->value != $entity->original->field_booking_status->value) {
        // The booking status has changed.

      
        // Get the booking title.
        $booking_title = $entity->getTitle();
          // Get the room, start datetime, and end datetime.
          $room = $entity->get('field_rooms')->entity->label();

            $room = strtoupper((string)$room);
       
            $start_datetime = $entity->get('field_field_start_datetime')->value;
          $end_datetime = $entity->get('field_end_datetime')->value;


          $status = $entity->field_booking_status->value;
          $status = strtoupper((string)$status);
// Convert the start datetime to a more readable format.
$start_datetime_object = new \DateTime($start_datetime);
$start_datetime_formatted = $start_datetime_object->format('F d, Y H:i');

$end_datetime_object = new \DateTime($end_datetime);
$end_datetime_formatted = $end_datetime_object->format('F d, Y H:i');
        // Prepare the email body.
      #  $email_body = 'Booking Title: ' . $booking_title . ', Booking Status: ' . $entity->field_booking_status->value;

        $email_body = '
        Details of your booking:
        
            Event : ' . $booking_title . '
            Booking Status : '.$status .'
            Date / Time: '.$start_datetime_formatted. ' to '.$end_datetime_formatted.'
            Room: '. $room.'
        
        If you have any questions or need to make changes to your booking, please contact us at [Contact Information].
        Best regards,
        ';


        // Get the author of the node.
        $author = $entity->getOwner();

        // Get the author's email.
        $author_email = $author->getEmail();

        // Prepare the email params.
        $module = 'booker';
        $key = 'booking_status_changed';
        $to = $author_email;
        $langcode = \Drupal::languageManager()->getDefaultLanguage()->getId();
        $send = true;

        // Prepare the email parameters.
        $params['subject'] = 'Booking Status';
        $params['body'] = $email_body;
        $params['from'] = 'noreply@psa.gov.ph'; // Replace with your email

        // Send the email.
        \Drupal::service('plugin.manager.mail')->mail($module, $key, $to, $langcode, $params, NULL, $send);
    }
}

/**
 * Implements hook_mail().
 */
function booker_mail($key, &$message, $params) {
    switch ($key) {
        case 'booking_status_changed':
            $message['subject'] = $params['subject'];
            $message['body'][] = $params['body'];
            $message['from'] = $params['from'];
            break;
    }
}